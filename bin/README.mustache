# Google Cloud Node.js Client Libraries

> Node.js idiomatic client libraries for [Google Cloud Platform](https://cloud.google.com/) services.

* [Node.js on Google Cloud][gcloud-homepage]

Libraries are available on GitHub and npm for developing Node.js
applications that interact with individual Google Cloud services:

| Repo | API Docs | Install Command | Enable    |  Free Tier |
|------|----------|-----------------|-----------|------------|
{{libraries}}

If the service is not listed above, [google-api-nodejs-client](https://github.com/googleapis/google-api-nodejs-client) interfaces
with additional Google Cloud APIs using a legacy REST interface.

_When building Node.js applications, preference should be given to the libraries listed in the table._

## Enabling APIs

Before you can interact with a given Google Cloud Service, you must enable its API. 

Links are available for enabling APIs in the table at the beginning of this document, and in
each libraries README.md.

## Authentication

- When **developing locally**, install the [Google Cloud SDK](https://cloud.google.com/sdk) and authenticate using your Google account:

    ```sh
    gcloud auth login --update-adc
    ```
    
- When **on Google Cloud**, this library will automatically detect the identity of the machine.

- When **outside Google Cloud**, configure [Federated workload identity](https://cloud.google.com/iam/docs/workload-identity-federation).

If all of the above are impossible, you can
[download a service account JSON file](https://cloud.google.com/iam/docs/creating-managing-service-account-keys), but this may be
forbidden by your organization's policies.

For more information, see [Best practices for authenticating to Google Cloud](https://cloud.google.com/docs/authentication/best-practices-applications).

### Other Authentication Methods

Other authentication methods are outlined in the README for [google-auth-library-nodejs](https://github.com/googleapis/google-auth-library-nodejs),
which is the authentication library used by all Google Cloud Node.js clients.

## Example Applications

- [nodejs-getting-started][nodejs-getting-started] - A sample and [tutorial][nodejs-getting-started-tutorial] that demonstrates how to build a complete web application using Cloud Datastore, Cloud Storage, and Cloud Pub/Sub and deploy it to Google App Engine or Google Compute Engine.
- [gcloud-node-todos][gcloud-todos] - A TodoMVC backend using google-cloud-node and Datastore.
- [gitnpm][gitnpm] - Easily lookup an npm package's GitHub repo using google-cloud-node and Google App Engine.
- [gcloud-kvstore][gcloud-kvstore] - Use Datastore as a simple key-value store.
- [hya-wave][hya-wave] - Cloud-based web sample editor. Part of the [hya-io][hya-io] family of products.
- [gstore-node][gstore-node] - Google Datastore Entities Modeling library.
- [gstore-api][gstore-api] - REST API builder for Google Datastore Entities.

## Supported Node.js Versions

Our client libraries follow the [Node.js release schedule](https://nodejs.org/en/about/releases/).
Libraries are compatible with all current _active_ and _maintenance_ versions of
Node.js.

Client libraries targetting some end-of-life versions of Node.js are available, and
can be installed via npm [dist-tags](https://docs.npmjs.com/cli/dist-tag).
The dist-tags follow the naming convention `legacy-(version)`.

_Legacy Node.js versions are supported as a best effort:_

* Legacy versions will not be tested in continuous integration.
* Some security patches may not be able to be backported.
* Dependencies will not be kept up-to-date, and features will not be backported.

#### Legacy tags available

* `legacy-8`: install client libraries from this dist-tag for versions
  compatible with Node.js 8.

## Versioning

Our libraries follow [Semantic Versioning][semver].

Please note it is currently under active development. Any release versioned `0.x.y` is subject to backwards-incompatible changes at any time.

**GA**: Libraries defined at the GA (general availability) quality level are stable. The code surface will not change in backwards-incompatible ways unless absolutely necessary (e.g. because of critical security issues) or with an extensive deprecation period. Issues and requests against GA libraries are addressed with the highest priority.

Please note that the auto-generated portions of the GA libraries (the ones in modules such as `v1` or `v2`) are considered to be of **Beta** quality, even if the libraries that wrap them are GA.

**Beta**: Libraries defined at the Beta quality level are expected to be mostly stable, while we work towards their release candidate. We will address issues and requests with a higher priority.

**Alpha**: Libraries defined at the Alpha quality level are still a work-in-progress and are more likely to get backwards-incompatible updates.

## Contributing

Contributions to this library are always welcome and highly encouraged.

See [CONTRIBUTING][contributing] for more information on how to get started.

## License

Apache 2.0 - See [LICENSE][license] for more information.

[gcloud-homepage]: https://cloud.google.com/nodejs/
[nodejs-getting-started]: https://github.com/GoogleCloudPlatform/nodejs-getting-started
[nodejs-getting-started-tutorial]: https://cloud.google.com/nodejs/getting-started/hello-world
[gcloud-todos]: https://github.com/GoogleCloudPlatform/gcloud-node-todos
[gitnpm]: https://github.com/stephenplusplus/gitnpm
[gcloud-kvstore]: https://github.com/stephenplusplus/gcloud-kvstore
[hya-wave]: https://wav.hya.io
[hya-io]: https://hya.io
[gstore-node]: https://github.com/sebelga/gstore-node
[gstore-api]: https://github.com/sebelga/gstore-api
[devconsole]: https://console.developer.google.com
[googleapis]: https://github.com/google/google-api-nodejs-client
[semver]: http://semver.org
[contributing]: CONTRIBUTING.md
[license]: LICENSE
